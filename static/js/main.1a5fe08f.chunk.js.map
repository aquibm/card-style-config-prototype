{"version":3,"sources":["components/header/Header.tsx","components/header/index.tsx","components/docs/Documentation.styles.tsx","components/card/StyleProvider.tsx","components/card/Card.tsx","components/example/hooks/use-schema.ts","components/docs/examples/layout/Default.tsx","components/docs/examples/layout/Flex.tsx","components/docs/examples/layout/index.tsx","components/docs/examples/typography/Default.tsx","components/docs/examples/typography/HeadingOne.tsx","components/docs/examples/typography/HeadingTwo.tsx","components/docs/examples/typography/HeadingThree.tsx","components/docs/examples/typography/HeadingFour.tsx","components/docs/examples/typography/HeadingFive.tsx","components/docs/examples/typography/HeadingSix.tsx","components/docs/examples/typography/Bold.tsx","components/docs/examples/typography/Italic.tsx","components/docs/examples/typography/Underline.tsx","components/docs/examples/typography/Uppercase.tsx","components/docs/examples/typography/index.tsx","components/docs/Documentation.tsx","components/footer/Footer.styles.tsx","components/footer/Footer.tsx","components/router/Navigation.styles.tsx","components/router/Navigation.tsx","examples/basic.ts","examples/event.ts","examples/custom.ts","examples/blog-post.ts","components/example/Example.styles.tsx","components/example/Example.tsx","components/example/hooks/use-data.ts","components/router/AppRouter.tsx","index.tsx"],"names":["Heading","styled","h1","Header","Background","div","Container","Section","h2","ExampleContainer","ExampleName","h3","ExampleDescription","p","ExamplePreview","StyleProvider","parseStyle","style","Array","isArray","map","styleLine","reduce","allClassNames","allCssRules","classNames","cssRules","Object","keys","key","Card","schema","data","renderSection","section","name","content","classes","join","Element","className","subSectionNames","subSectionName","sections","topLevelSectionNames","sectionName","useSchema","rawSchema","useMemo","yaml","parse","error","layout","one","two","three","Preview","LayoutExamples","summary","heading","TypographyExamples","Documentation","footer","Text","Footer","href","target","rel","Nav","nav","Link","RouterLink","props","selected","Navigation","logSelected","useRouteMatch","eventsSelected","customSelected","to","Boolean","JSON","stringify","id","date","month","title","description","test","EditorContainer","CardContainer","h4","ErrorContainer","ErrorHeading","h5","ErrorMessage","Example","rawData","useState","editorSchema","setEditorSchema","editorData","setEditorData","schemaError","useData","dataError","height","language","theme","value","onChange","options","lineNumbers","minimap","enabled","message","item","idx","AppRouter","path","postSchema","postData","basicData","eventData","customData","App","basename","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mSAGMA,EAAUC,IAAOC,GAAV,iJCFEC,EDSI,kBAAM,cAACH,EAAD,2BERZI,EAAaH,IAAOI,IAAV,wEAIVC,EAAYL,IAAOI,IAAV,0KAUTE,EAAUN,IAAOI,IAAV,iHAQPL,EAAUC,IAAOO,GAAV,oGAKPC,EAAmBR,IAAOI,IAAV,8PAchBK,EAAcT,IAAOU,GAAV,wEAKXC,EAAqBX,IAAOY,EAAV,0EAKlBC,EAAiBb,IAAOI,IAAV,oE,gBCnDdU,G,OAAgBd,IAAOI,IAAV,qhCCY1B,SAASW,EAAWC,GAChB,OAAKA,EAIgB,kBAAVA,EACA,CAAC,CAACA,GAAQ,IAGjBC,MAAMC,QAAQF,GACPA,EACFG,KAAI,SAACC,GAAD,OAAeL,EAAWK,MAC9BC,QACG,qCAAEC,EAAF,KAAiBC,EAAjB,wBAAgCC,EAAhC,KAA4CC,EAA5C,WAA0D,CAAC,GAAD,mBAClDH,GADkD,YAChCE,IADgC,sBAElDD,GAFkD,YAElCE,OAExB,CAAC,GAAI,KAOV,CAAC,GAHSC,OAAOC,KAAKX,GAAOG,KAChC,SAACS,GAAD,gBAAYA,EAAZ,aAAoBZ,EAAMY,GAA1B,mBApBO,CAAC,GAAI,IAyBb,I,sBAAMC,EAAkB,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,KAChCC,EAAgB,SAAhBA,EAAiBC,EAAkBC,GACrC,IAAKD,EACD,OAAO,KAF2C,IAK9CE,EAAmBF,EAAnBE,QAL8C,EAO1BpB,EAFDkB,EAAVjB,OALqC,mBAO/CoB,EAP+C,KAOtCX,EAPsC,KAShDD,EAAaY,EAAQC,KAAK,KAC1BC,EAAUtC,IAAOI,IAAV,oDACPqB,EAASY,KAAK,MAGpB,IAAKF,GAA8B,kBAAZA,EACnB,OACI,cAACrB,EAAD,UACI,cAACwB,EAAD,CAAoBC,UAAWf,EAA/B,SACKO,EAAKI,IADID,KAO1B,IAAMM,EAAkBd,OAAOC,KAAKQ,GACpC,OACI,cAACrB,EAAD,UACI,cAACwB,EAAD,CAAoBC,UAAWf,EAA/B,SACKgB,EAAgBrB,KAAI,SAACsB,GAAD,OACjBT,EAAcG,EAAQM,GAAiBA,OAFjCP,MAS1B,IAAKJ,IAAWA,EAAOY,SAAU,OAAO,KAExC,IAAMC,EAAuBjB,OAAOC,KAAKG,EAAOY,UAEhD,OACI,qBAAKH,UAAU,OAAf,SACKI,EAAqBxB,KAAI,SAACyB,GAAD,OACtBZ,EAAcF,EAAOY,SAASE,GAAcA,S,kBC9E/CC,EAAY,SAACC,GAAD,OACrBC,mBAAQ,WACJ,IAEI,MAAO,CADQC,IAAKC,MAAMH,GACV,MAClB,MAAOI,GACL,MAAO,CAAC,CAAEC,OAAQ,OAAQT,SAAU,IAAMQ,MAE/C,CAACJ,KCXFf,EAAO,CACTqB,IAAK,MACLC,IAAK,MACLC,MAAO,SAkBEC,EAAc,WAAO,IAAD,EACZV,EAhBN,mIAgBJf,EADsB,oBAG7B,OAAO,cAAC,EAAD,CAAMA,OAAQA,EAAQC,KAAMA,KCxBjCA,EAAO,CACTqB,IAAK,MACLC,IAAK,MACLC,MAAO,SAsBEC,GAAc,WAAO,IAAD,EACZV,EApBN,uOAoBJf,EADsB,oBAG7B,OAAO,cAAC,EAAD,CAAMA,OAAQA,EAAQC,KAAMA,KCrB1ByB,GAAqB,kBAC9B,qCACI,eAAChD,EAAD,WACI,cAACC,EAAD,UFOQ,YENR,cAACE,EAAD,UFQe,4CEPf,cAACE,EAAD,UACI,cAAC,EAAD,SAIR,eAACL,EAAD,WACI,cAACC,EAAD,UDEQ,SCDR,cAACE,EAAD,UDIR,uGCHQ,cAACE,EAAD,UACI,cAAC,GAAD,aCrBVkB,GAAO,CACT0B,QACI,saAYKF,GAAc,WAAO,IAAD,EACZV,EAVN,uEAUJf,EADsB,oBAG7B,OAAO,cAAC,EAAD,CAAMA,OAAQA,EAAQC,KAAMA,MCjBjCA,GAAO,CACT2B,QAAS,+CAaAH,GAAc,WAAO,IAAD,EACZV,EAXN,0FAWJf,EADsB,oBAG7B,OAAO,cAAC,EAAD,CAAMA,OAAQA,EAAQC,KAAMA,MCjBjCA,GAAO,CACT2B,QAAS,+CAaAH,GAAc,WAAO,IAAD,EACZV,EAXN,0FAWJf,EADsB,oBAG7B,OAAO,cAAC,EAAD,CAAMA,OAAQA,EAAQC,KAAMA,MCjBjCA,GAAO,CACT2B,QAAS,+CAaAH,GAAc,WAAO,IAAD,EACZV,EAXN,0FAWJf,EADsB,oBAG7B,OAAO,cAAC,EAAD,CAAMA,OAAQA,EAAQC,KAAMA,MCjBjCA,GAAO,CACT2B,QAAS,+CAaAH,GAAc,WAAO,IAAD,EACZV,EAXN,0FAWJf,EADsB,oBAG7B,OAAO,cAAC,EAAD,CAAMA,OAAQA,EAAQC,KAAMA,MCjBjCA,GAAO,CACT2B,QAAS,+CAaAH,GAAc,WAAO,IAAD,EACZV,EAXN,0FAWJf,EADsB,oBAG7B,OAAO,cAAC,EAAD,CAAMA,OAAQA,EAAQC,KAAMA,MCjBjCA,GAAO,CACT2B,QAAS,+CAaAH,GAAc,WAAO,IAAD,EACZV,EAXN,0FAWJf,EADsB,oBAG7B,OAAO,cAAC,EAAD,CAAMA,OAAQA,EAAQC,KAAMA,MCjBjCA,GAAO,CACT0B,QACI,saAaKF,GAAc,WAAO,IAAD,EACZV,EAXN,4FAWJf,EADsB,oBAG7B,OAAO,cAAC,EAAD,CAAMA,OAAQA,EAAQC,KAAMA,MClBjCA,GAAO,CACT0B,QACI,saAaKF,GAAc,WAAO,IAAD,EACZV,EAXN,8FAWJf,EADsB,oBAG7B,OAAO,cAAC,EAAD,CAAMA,OAAQA,EAAQC,KAAMA,MClBjCA,GAAO,CACT0B,QACI,saAaKF,GAAc,WAAO,IAAD,EACZV,EAXN,iGAWJf,EADsB,oBAG7B,OAAO,cAAC,EAAD,CAAMA,OAAQA,EAAQC,KAAMA,MClBjCA,GAAO,CACT0B,QACI,saAaKF,GAAc,WAAO,IAAD,EACZV,EAXN,iGAWJf,EADsB,oBAG7B,OAAO,cAAC,EAAD,CAAMA,OAAQA,EAAQC,KAAMA,MCF1B4B,GAAyB,kBAClC,qCACI,eAACnD,EAAD,WACI,cAACC,EAAD,UXPQ,YWQR,cAACI,EAAD,UACI,cAAC,GAAD,SAIR,eAACL,EAAD,WACI,cAACC,EAAD,UVdQ,OUeR,cAACI,EAAD,UACI,cAAC,GAAD,SAIR,eAACL,EAAD,WACI,cAACC,EAAD,UTrBQ,OSsBR,cAACI,EAAD,UACI,cAAC,GAAD,SAIR,eAACL,EAAD,WACI,cAACC,EAAD,UR5BQ,OQ6BR,cAACI,EAAD,UACI,cAAC,GAAD,SAIR,eAACL,EAAD,WACI,cAACC,EAAD,UPnCQ,OOoCR,cAACI,EAAD,UACI,cAAC,GAAD,SAIR,eAACL,EAAD,WACI,cAACC,EAAD,UN1CQ,OM2CR,cAACI,EAAD,UACI,cAAC,GAAD,SAIR,eAACL,EAAD,WACI,cAACC,EAAD,ULjDQ,OKkDR,cAACI,EAAD,UACI,cAAC,GAAD,SAIR,eAACL,EAAD,WACI,cAACC,EAAD,UJvDQ,SIwDR,cAACI,EAAD,UACI,cAAC,GAAD,SAIR,eAACL,EAAD,WACI,cAACC,EAAD,UH9DQ,WG+DR,cAACI,EAAD,UACI,cAAC,GAAD,SAIR,eAACL,EAAD,WACI,cAACC,EAAD,UFrEQ,cEsER,cAACI,EAAD,UACI,cAAC,GAAD,SAIR,eAACL,EAAD,WACI,cAACC,EAAD,UD5EQ,cC6ER,cAACI,EAAD,UACI,cAAC,GAAD,aCnFH+C,GAAoB,kBAC7B,cAACzD,EAAD,UACI,eAACE,EAAD,WACI,eAACC,EAAD,WACI,cAAC,EAAD,sBACA,cAAC,GAAD,OAGJ,eAACA,EAAD,WACI,cAAC,EAAD,yBACA,cAAC,GAAD,aCpBHH,GAAaH,IAAO6D,OAAV,+LAWVC,GAAO9D,IAAOU,GAAV,4HCVJqD,GAAa,kBACtB,cAAC,GAAD,UACI,eAACD,GAAD,wBACe,KADf,MACwB,IACpB,mBACIE,KAAK,uDACLC,OAAO,SACPC,IAAI,aAHR,0B,SCJCC,GAAMnE,IAAOoE,IAAV,8EASHC,GAAOrE,YAAOsE,IAAPtE,CAAH,scAKJ,SAACuE,GAAD,OAAYA,EAAMC,SAAW,QAAU,UAC5B,SAACD,GAAD,OAChBA,EAAMC,SAAW,gBAAkB,WCd9BC,GAAiB,WAC1B,IAAMC,EAAcC,aAAc,QAC5BC,EAAiBD,aAAc,WAC/BE,EAAiBF,aAAc,WAErC,OACI,eAACR,GAAD,WACI,cAACE,GAAD,CACIS,GAAG,QACHN,UAAWE,IAAgBE,IAAmBC,EAFlD,kBAMA,cAACR,GAAD,CAAMS,GAAG,UAAUN,SAAUO,QAAQH,GAArC,oBAGA,cAACP,GAAD,CAAMS,GAAG,OAAON,SAAUO,QAAQL,GAAlC,iBAGA,cAACL,GAAD,CAAMS,GAAG,UAAUN,SAAUO,QAAQF,GAArC,wBCxBN9C,GAAOiD,KAAKC,UACd,CACI,CACIC,GAAI,UACJC,KAAM,oBACNhD,QACI,+bAER,CACI+C,GAAI,UACJC,KAAM,oBACNhD,QACI,2NAER,CACI+C,GAAI,UACJC,KAAM,oBACNhD,QACI,yPAGZ,KACA,GCtBEJ,GAAOiD,KAAKC,UACd,CACI,CACIE,KAAM,KACNC,MAAO,MACPC,MAAO,6BACPC,YACI,qIAER,CACIH,KAAM,KACNC,MAAO,MACPC,MAAO,iCACPC,YACI,qKAGZ,KACA,GClBSvD,GAAOiD,KAAKC,UACrB,CAAC,CAAEM,KAAM,SAAW,CAAEA,KAAM,WAC5B,KACA,GCHSxD,GAAI,s7BAoBJD,GAAM,wV,UClBNzB,GAAYL,IAAOI,IAAV,gDAIToF,GAAkBxF,IAAOI,IAAV,oEAKfqF,GAAgBzF,IAAOI,IAAV,oEAKbL,GAAUC,IAAO0F,GAAV,qGAMPC,GAAiB3F,IAAOI,IAAV,gKASdwF,GAAe5F,IAAO6F,GAAV,kEAKZC,GAAe9F,IAAOY,EAAV,mDCdZmF,GAAqB,SAAC,GAAmC,IAAjCjD,EAAgC,EAAhCA,UAAWkD,EAAqB,EAArBA,QAAqB,EACzBC,mBAASnD,GADgB,mBAC1DoD,EAD0D,KAC5CC,EAD4C,OAE7BF,mBAASD,GAFoB,mBAE1DI,EAF0D,KAE9CC,EAF8C,OAInCxD,EAAUqD,GAJyB,mBAI1DpE,EAJ0D,KAIlDwE,EAJkD,OCjB9C,SAACN,GAAD,OACnBjD,mBAAmB,WACf,IAEI,MAAO,CADMiC,KAAK/B,MAAM+C,GACV,MAChB,MAAO9C,GACL,MAAO,CAAC,GAAIA,MAEjB,CAAC8C,IDcsBO,CAAQH,GAL+B,mBAK1DrE,EAL0D,KAKpDyE,EALoD,KAOjE,OACI,eAAC,GAAD,WACI,eAAChB,GAAD,WACI,cAAC,GAAD,qBACA,cAAC,KAAD,CACIiB,OAAQ,IACRC,SAAS,OACTC,MAAM,UACNC,MAAOV,EACPW,SAAUV,EACVW,QAAS,CACLC,YAAa,MACbC,QAAS,CAAEC,SAAS,MAI5B,cAAC,GAAD,mBACA,cAAC,KAAD,CACIR,OAAQ,IACRC,SAAS,OACTC,MAAM,UACNC,MAAOR,EACPS,SAAUR,EACVS,QAAS,CACLC,YAAa,MACbC,QAAS,CAAEC,SAAS,SAKhC,eAACxB,GAAD,WACI,cAAC,GAAD,qBAECe,GACG,eAACb,GAAD,WACI,cAACC,GAAD,yBACA,cAACE,GAAD,UAAeU,EAAUU,aAIhCZ,GACG,eAACX,GAAD,WACI,cAACC,GAAD,2BACA,cAACE,GAAD,UAAeQ,EAAYY,cAIjCV,IACGF,GACDvE,EAAKZ,KAAI,SAACgG,EAAMC,GAAP,OACL,cAAC,EAAD,CAAgBtF,OAAQA,EAAQC,KAAMoF,GAA3BC,aE/DtBC,GAAgB,kBACzB,eAAC,KAAD,WACI,cAAC,KAAD,CAAOC,KAAK,QAAZ,SACI,cAAC,GAAD,CAAqBxE,UAAWyE,GAAYvB,QAASwB,IAAxC,WAGjB,cAAC,KAAD,CAAOF,KAAK,OAAZ,SACI,cAAC,GAAD,CAAoBxE,UPEpB,6SOF4CkD,QAASyB,IAAxC,UAGjB,cAAC,KAAD,CAAOH,KAAK,UAAZ,SACI,cAAC,GAAD,CAEIxE,UNRJ,2uBMSIkD,QAAS0B,IAFL,aAMZ,cAAC,KAAD,CAAOJ,KAAK,UAAZ,SACI,cAAC,GAAD,CAEIxE,UL/BG,gEKgCHkD,QAAS2B,IAFL,aAMZ,cAAC,KAAD,UACI,cAAC,GAAD,CAAiB7E,UAAWyE,GAAYvB,QAASwB,IAApC,WChCnBI,I,OAAU,WAMZ,OACI,eAAC,IAAD,CAAQC,SAJF,+BAIN,UACI,sBAAKtF,UAAU,MAAf,UACI,qBAAKA,UAAU,eAAf,SACI,cAAC,EAAD,MAGJ,qBAAKA,UAAU,eAAf,SACI,cAAC,GAAD,MAGJ,qBAAKA,UAAU,eAAf,SACI,cAAC,GAAD,SAIR,cAAC,GAAD,IACA,cAAC,GAAD,SAKZuF,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,GAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.1a5fe08f.chunk.js","sourcesContent":["import { FC } from 'react';\nimport styled from 'styled-components';\n\nconst Heading = styled.h1`\n    font-size: 38px;\n    font-weight: 700;\n    text-transform: uppercase;\n    font-family: 'Cousine', monospace;\n`;\n\nconst Header: FC = () => <Heading>Card Config</Heading>;\n\nexport default Header;\n","import Header from './Header';\nexport default Header;\n","import styled from 'styled-components';\n\nexport const Background = styled.div`\n    border-top: 12px dashed palevioletred;\n`;\n\nexport const Container = styled.div`\n    max-width: 1280px;\n    margin: 0 auto;\n    padding: 10px;\n\n    @media screen and (min-width: 768px) {\n        padding: 40px;\n    }\n`;\n\nexport const Section = styled.div`\n    margin-bottom: 80px;\n\n    &:last-child {\n        margin-bottom: 20px;\n    }\n`;\n\nexport const Heading = styled.h2`\n    text-transform: uppercase;\n    font-family: 'Cousine', monospace;\n`;\n\nexport const ExampleContainer = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n\n    padding-bottom: 30px;\n    margin-bottom: 30px;\n\n    &:last-child {\n        border-bottom: none;\n        margin-bottom: 0px;\n    }\n`;\n\nexport const ExampleName = styled.h3`\n    flex: 0 0 80px;\n    font-weight: 400;\n`;\n\nexport const ExampleDescription = styled.p`\n    flex: 0 0 400px;\n    margin-left: 40px;\n`;\n\nexport const ExamplePreview = styled.div`\n    flex: 1 0;\n    margin-left: 40px;\n`;\n","import styled from 'styled-components';\n\nexport const StyleProvider = styled.div`\n    /* Layout */\n    & .flex {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n    }\n\n    line-height: 1.4;\n\n    /* Typography */\n    & .h1 {\n        font-size: 28px;\n        font-weight: 700;\n    }\n\n    & .h2 {\n        font-size: 24px;\n        font-weight: 700;\n    }\n\n    & .h3 {\n        font-size: 24px;\n        font-weight: 400;\n    }\n\n    & .h4 {\n        font-size: 20px;\n        font-weight: 700;\n        text-transform: uppercase;\n        color: #545454;\n    }\n\n    & .h5 {\n        font-size: 20px;\n        font-weight: 400;\n        color: #545454;\n    }\n\n    & .h6 {\n        font-size: 16px;\n        font-weight: 700;\n        text-transform: uppercase;\n        color: #545454;\n    }\n\n    & .bold {\n        font-weight: 700;\n    }\n\n    & .italic {\n        font-style: italic;\n    }\n\n    & .underline {\n        text-decoration: underline;\n    }\n\n    & .uppercase {\n        text-transform: uppercase;\n    }\n`;\n","import { FC } from 'react';\nimport styled from 'styled-components';\n\nimport './card.css';\n\nimport { Schema, Section, Style } from '../../types/schema.types';\nimport { Data } from '../../types/data.types';\nimport { StyleProvider } from './StyleProvider';\n\ntype Props = {\n    schema: Schema;\n    data: Data;\n};\n\nfunction parseStyle(style?: Style): [classNames: string[], cssRules: string[]] {\n    if (!style) {\n        return [[], []];\n    }\n\n    if (typeof style === 'string') {\n        return [[style], []];\n    }\n\n    if (Array.isArray(style)) {\n        return style\n            .map((styleLine) => parseStyle(styleLine))\n            .reduce(\n                ([allClassNames, allCssRules], [classNames, cssRules]) => [\n                    [...allClassNames, ...classNames],\n                    [...allCssRules, ...cssRules],\n                ],\n                [[], []],\n            );\n    }\n\n    const cssRules = Object.keys(style).map(\n        (key) => `${key}: ${style[key]} !important`,\n    );\n    return [[], cssRules];\n}\n\nexport const Card: FC<Props> = ({ schema, data }: Props) => {\n    const renderSection = (section: Section, name: string) => {\n        if (!section) {\n            return null;\n        }\n\n        const { content, style } = section;\n\n        const [classes, cssRules] = parseStyle(style);\n\n        const classNames = classes.join(' ');\n        const Element = styled.div`\n            ${cssRules.join(';')}\n        `;\n\n        if (!content || typeof content === 'string') {\n            return (\n                <StyleProvider>\n                    <Element key={name} className={classNames}>\n                        {data[content]}\n                    </Element>\n                </StyleProvider>\n            );\n        }\n\n        const subSectionNames = Object.keys(content);\n        return (\n            <StyleProvider>\n                <Element key={name} className={classNames}>\n                    {subSectionNames.map((subSectionName) =>\n                        renderSection(content[subSectionName], subSectionName),\n                    )}\n                </Element>\n            </StyleProvider>\n        );\n    };\n\n    if (!schema || !schema.sections) return null;\n\n    const topLevelSectionNames = Object.keys(schema.sections);\n\n    return (\n        <div className=\"card\">\n            {topLevelSectionNames.map((sectionName) =>\n                renderSection(schema.sections[sectionName], sectionName),\n            )}\n        </div>\n    );\n};\n","import yaml from 'yaml';\nimport { useMemo } from 'react';\n\nimport { Schema } from '../../../types/schema.types';\n\ntype SchemaTuple = [schema: Schema, error: Error | null];\n\nexport const useSchema = (rawSchema: string): SchemaTuple =>\n    useMemo(() => {\n        try {\n            const schema = yaml.parse(rawSchema) as Schema;\n            return [schema, null];\n        } catch (error) {\n            return [{ layout: 'card', sections: {} }, error as Error];\n        }\n    }, [rawSchema]);\n","import { FC } from 'react';\nimport { Card } from '../../../card';\nimport { useSchema } from '../../../example/hooks/use-schema';\n\nconst data = {\n    one: 'One',\n    two: 'Two',\n    three: 'Three',\n};\n\nconst rawSchema = `\nlayout: card\nsections:\n    one:\n        content: one\n    two:\n        content: two\n    three:\n        content: three\n`;\n\nexport const Name = 'Default';\n\nexport const Description = 'Content is stacked on top of each other';\n\nexport const Preview: FC = () => {\n    const [schema] = useSchema(rawSchema);\n\n    return <Card schema={schema} data={data} />;\n};\n","import { FC } from 'react';\nimport { Card } from '../../../card';\nimport { useSchema } from '../../../example/hooks/use-schema';\n\nconst data = {\n    one: 'One',\n    two: 'Two',\n    three: 'Three',\n};\n\nconst rawSchema = `\nlayout: card\nsections:\n    parent:\n        style: flex\n        content:\n            one:\n                content: one\n            two:\n                content: two\n            three:\n                content: three\n`;\n\nexport const Name = 'flex';\n\nexport const Description =\n    'Content is placed on the same row with space between. Content is vertically aligned in the middle.';\n\nexport const Preview: FC = () => {\n    const [schema] = useSchema(rawSchema);\n\n    return <Card schema={schema} data={data} />;\n};\n","import { FC } from 'react';\nimport {\n    ExampleContainer,\n    ExampleDescription,\n    ExampleName,\n    ExamplePreview,\n} from '../../Documentation.styles';\n\nimport * as Default from './Default';\nimport * as Flex from './Flex';\n\nexport const LayoutExamples: FC = () => (\n    <>\n        <ExampleContainer>\n            <ExampleName>{Default.Name}</ExampleName>\n            <ExampleDescription>{Default.Description}</ExampleDescription>\n            <ExamplePreview>\n                <Default.Preview />\n            </ExamplePreview>\n        </ExampleContainer>\n\n        <ExampleContainer>\n            <ExampleName>{Flex.Name}</ExampleName>\n            <ExampleDescription>{Flex.Description}</ExampleDescription>\n            <ExamplePreview>\n                <Flex.Preview />\n            </ExamplePreview>\n        </ExampleContainer>\n    </>\n);\n","import { FC } from 'react';\nimport { Card } from '../../../card';\nimport { useSchema } from '../../../example/hooks/use-schema';\n\nconst data = {\n    summary:\n        \"That's a crooked tree. We'll send him to Washington. Let's go up in here, and start having some fun This is the time to get out all your flustrations, much better than kicking the dog around the house or taking it out on your spouse. All you need is a dream in your heart, and an almighty knife. This is probably the greatest thing to happen in my life - to be able to share this with you. Here's something that's fun.\",\n};\n\nconst rawSchema = `\nlayout: card\nsections:\n    section:\n        content: summary\n`;\n\nexport const Name = 'Default';\n\nexport const Preview: FC = () => {\n    const [schema] = useSchema(rawSchema);\n\n    return <Card schema={schema} data={data} />;\n};\n","import { FC } from 'react';\nimport { Card } from '../../../card';\nimport { useSchema } from '../../../example/hooks/use-schema';\n\nconst data = {\n    heading: 'The quick brown fox jumps over the lazy dog',\n};\n\nconst rawSchema = `\nlayout: card\nsections:\n    section:\n        style: h1\n        content: heading\n`;\n\nexport const Name = 'h1';\n\nexport const Preview: FC = () => {\n    const [schema] = useSchema(rawSchema);\n\n    return <Card schema={schema} data={data} />;\n};\n","import { FC } from 'react';\nimport { Card } from '../../../card';\nimport { useSchema } from '../../../example/hooks/use-schema';\n\nconst data = {\n    heading: 'The quick brown fox jumps over the lazy dog',\n};\n\nconst rawSchema = `\nlayout: card\nsections:\n    section:\n        style: h2\n        content: heading\n`;\n\nexport const Name = 'h2';\n\nexport const Preview: FC = () => {\n    const [schema] = useSchema(rawSchema);\n\n    return <Card schema={schema} data={data} />;\n};\n","import { FC } from 'react';\nimport { Card } from '../../../card';\nimport { useSchema } from '../../../example/hooks/use-schema';\n\nconst data = {\n    heading: 'The quick brown fox jumps over the lazy dog',\n};\n\nconst rawSchema = `\nlayout: card\nsections:\n    section:\n        style: h3\n        content: heading\n`;\n\nexport const Name = 'h3';\n\nexport const Preview: FC = () => {\n    const [schema] = useSchema(rawSchema);\n\n    return <Card schema={schema} data={data} />;\n};\n","import { FC } from 'react';\nimport { Card } from '../../../card';\nimport { useSchema } from '../../../example/hooks/use-schema';\n\nconst data = {\n    heading: 'The quick brown fox jumps over the lazy dog',\n};\n\nconst rawSchema = `\nlayout: card\nsections:\n    section:\n        style: h4\n        content: heading\n`;\n\nexport const Name = 'h4';\n\nexport const Preview: FC = () => {\n    const [schema] = useSchema(rawSchema);\n\n    return <Card schema={schema} data={data} />;\n};\n","import { FC } from 'react';\nimport { Card } from '../../../card';\nimport { useSchema } from '../../../example/hooks/use-schema';\n\nconst data = {\n    heading: 'The quick brown fox jumps over the lazy dog',\n};\n\nconst rawSchema = `\nlayout: card\nsections:\n    section:\n        style: h5\n        content: heading\n`;\n\nexport const Name = 'h5';\n\nexport const Preview: FC = () => {\n    const [schema] = useSchema(rawSchema);\n\n    return <Card schema={schema} data={data} />;\n};\n","import { FC } from 'react';\nimport { Card } from '../../../card';\nimport { useSchema } from '../../../example/hooks/use-schema';\n\nconst data = {\n    heading: 'The quick brown fox jumps over the lazy dog',\n};\n\nconst rawSchema = `\nlayout: card\nsections:\n    section:\n        style: h6\n        content: heading\n`;\n\nexport const Name = 'h6';\n\nexport const Preview: FC = () => {\n    const [schema] = useSchema(rawSchema);\n\n    return <Card schema={schema} data={data} />;\n};\n","import { FC } from 'react';\nimport { Card } from '../../../card';\nimport { useSchema } from '../../../example/hooks/use-schema';\n\nconst data = {\n    summary:\n        \"That's a crooked tree. We'll send him to Washington. Let's go up in here, and start having some fun This is the time to get out all your flustrations, much better than kicking the dog around the house or taking it out on your spouse. All you need is a dream in your heart, and an almighty knife. This is probably the greatest thing to happen in my life - to be able to share this with you. Here's something that's fun.\",\n};\n\nconst rawSchema = `\nlayout: card\nsections:\n    section:\n        style: bold\n        content: summary\n`;\n\nexport const Name = 'bold';\n\nexport const Preview: FC = () => {\n    const [schema] = useSchema(rawSchema);\n\n    return <Card schema={schema} data={data} />;\n};\n","import { FC } from 'react';\nimport { Card } from '../../../card';\nimport { useSchema } from '../../../example/hooks/use-schema';\n\nconst data = {\n    summary:\n        \"That's a crooked tree. We'll send him to Washington. Let's go up in here, and start having some fun This is the time to get out all your flustrations, much better than kicking the dog around the house or taking it out on your spouse. All you need is a dream in your heart, and an almighty knife. This is probably the greatest thing to happen in my life - to be able to share this with you. Here's something that's fun.\",\n};\n\nconst rawSchema = `\nlayout: card\nsections:\n    section:\n        style: italic\n        content: summary\n`;\n\nexport const Name = 'italic';\n\nexport const Preview: FC = () => {\n    const [schema] = useSchema(rawSchema);\n\n    return <Card schema={schema} data={data} />;\n};\n","import { FC } from 'react';\nimport { Card } from '../../../card';\nimport { useSchema } from '../../../example/hooks/use-schema';\n\nconst data = {\n    summary:\n        \"That's a crooked tree. We'll send him to Washington. Let's go up in here, and start having some fun This is the time to get out all your flustrations, much better than kicking the dog around the house or taking it out on your spouse. All you need is a dream in your heart, and an almighty knife. This is probably the greatest thing to happen in my life - to be able to share this with you. Here's something that's fun.\",\n};\n\nconst rawSchema = `\nlayout: card\nsections:\n    section:\n        style: underline\n        content: summary\n`;\n\nexport const Name = 'underline';\n\nexport const Preview: FC = () => {\n    const [schema] = useSchema(rawSchema);\n\n    return <Card schema={schema} data={data} />;\n};\n","import { FC } from 'react';\nimport { Card } from '../../../card';\nimport { useSchema } from '../../../example/hooks/use-schema';\n\nconst data = {\n    summary:\n        \"That's a crooked tree. We'll send him to Washington. Let's go up in here, and start having some fun This is the time to get out all your flustrations, much better than kicking the dog around the house or taking it out on your spouse. All you need is a dream in your heart, and an almighty knife. This is probably the greatest thing to happen in my life - to be able to share this with you. Here's something that's fun.\",\n};\n\nconst rawSchema = `\nlayout: card\nsections:\n    section:\n        style: uppercase\n        content: summary\n`;\n\nexport const Name = 'uppercase';\n\nexport const Preview: FC = () => {\n    const [schema] = useSchema(rawSchema);\n\n    return <Card schema={schema} data={data} />;\n};\n","import { FC } from 'react';\nimport {\n    ExampleContainer,\n    ExampleName,\n    ExamplePreview,\n} from '../../Documentation.styles';\n\nimport * as Default from './Default';\nimport * as HeadingOne from './HeadingOne';\nimport * as HeadingTwo from './HeadingTwo';\nimport * as HeadingThree from './HeadingThree';\nimport * as HeadingFour from './HeadingFour';\nimport * as HeadingFive from './HeadingFive';\nimport * as HeadingSix from './HeadingSix';\n\nimport * as Bold from './Bold';\nimport * as Italic from './Italic';\nimport * as Underline from './Underline';\nimport * as Uppercase from './Uppercase';\n\nexport const TypographyExamples: FC = () => (\n    <>\n        <ExampleContainer>\n            <ExampleName>{Default.Name}</ExampleName>\n            <ExamplePreview>\n                <Default.Preview />\n            </ExamplePreview>\n        </ExampleContainer>\n\n        <ExampleContainer>\n            <ExampleName>{HeadingOne.Name}</ExampleName>\n            <ExamplePreview>\n                <HeadingOne.Preview />\n            </ExamplePreview>\n        </ExampleContainer>\n\n        <ExampleContainer>\n            <ExampleName>{HeadingTwo.Name}</ExampleName>\n            <ExamplePreview>\n                <HeadingTwo.Preview />\n            </ExamplePreview>\n        </ExampleContainer>\n\n        <ExampleContainer>\n            <ExampleName>{HeadingThree.Name}</ExampleName>\n            <ExamplePreview>\n                <HeadingThree.Preview />\n            </ExamplePreview>\n        </ExampleContainer>\n\n        <ExampleContainer>\n            <ExampleName>{HeadingFour.Name}</ExampleName>\n            <ExamplePreview>\n                <HeadingFour.Preview />\n            </ExamplePreview>\n        </ExampleContainer>\n\n        <ExampleContainer>\n            <ExampleName>{HeadingFive.Name}</ExampleName>\n            <ExamplePreview>\n                <HeadingFive.Preview />\n            </ExamplePreview>\n        </ExampleContainer>\n\n        <ExampleContainer>\n            <ExampleName>{HeadingSix.Name}</ExampleName>\n            <ExamplePreview>\n                <HeadingSix.Preview />\n            </ExamplePreview>\n        </ExampleContainer>\n\n        <ExampleContainer>\n            <ExampleName>{Bold.Name}</ExampleName>\n            <ExamplePreview>\n                <Bold.Preview />\n            </ExamplePreview>\n        </ExampleContainer>\n\n        <ExampleContainer>\n            <ExampleName>{Italic.Name}</ExampleName>\n            <ExamplePreview>\n                <Italic.Preview />\n            </ExamplePreview>\n        </ExampleContainer>\n\n        <ExampleContainer>\n            <ExampleName>{Underline.Name}</ExampleName>\n            <ExamplePreview>\n                <Underline.Preview />\n            </ExamplePreview>\n        </ExampleContainer>\n\n        <ExampleContainer>\n            <ExampleName>{Uppercase.Name}</ExampleName>\n            <ExamplePreview>\n                <Uppercase.Preview />\n            </ExamplePreview>\n        </ExampleContainer>\n    </>\n);\n","import { FC } from 'react';\n\nimport { LayoutExamples } from './examples/layout';\nimport { TypographyExamples } from './examples/typography';\n\nimport {\n    Background,\n    Container,\n    Section,\n    Heading,\n} from './Documentation.styles';\n\nexport const Documentation: FC = () => (\n    <Background>\n        <Container>\n            <Section>\n                <Heading>Layouts</Heading>\n                <LayoutExamples />\n            </Section>\n\n            <Section>\n                <Heading>Typography</Heading>\n                <TypographyExamples />\n            </Section>\n        </Container>\n    </Background>\n);\n","import styled from 'styled-components';\n\nexport const Background = styled.footer`\n    padding: 12px 0;\n    background: palevioletred;\n    color: white;\n\n    & *::selection {\n        background: white;\n        color: palevioletred;\n    }\n`;\n\nexport const Text = styled.h3`\n    margin: 0;\n    text-align: center;\n\n    a {\n        text-decoration: underline;\n    }\n`;\n","import { FC } from 'react';\nimport { Background, Text } from './Footer.styles';\n\nexport const Footer: FC = () => (\n    <Background>\n        <Text>\n            Made with {'<3'} by{' '}\n            <a\n                href=\"http://github.com/aquibm/card-style-config-prototype\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n            >\n                aquibm\n            </a>\n        </Text>\n    </Background>\n);\n","import styled from 'styled-components';\nimport { Link as RouterLink } from 'react-router-dom';\n\nexport const Nav = styled.nav`\n    display: flex;\n    justify-content: center;\n`;\n\ntype LinkProps = {\n    selected?: boolean;\n};\n\nexport const Link = styled(RouterLink)<LinkProps>`\n    padding: 12px 32px;\n    margin-right: 15px;\n    border-radius: 8px;\n\n    color: ${(props) => (props.selected ? 'white' : '#333')};\n    background-color: ${(props) =>\n        props.selected ? 'palevioletred' : 'white'};\n    border: 1px solid transparent;\n    box-shadow: 0px 3px 8px #e9e9e9;\n\n    font-size: 14px;\n    font-weight: 700;\n    text-transform: uppercase;\n\n    &:hover {\n        border-color: #eee;\n        box-shadow: 0px 5px 12px #e9e9e9;\n    }\n\n    &:last-child {\n        margin-right: 0;\n    }\n`;\n","import { FC } from 'react';\nimport { useRouteMatch } from 'react-router';\n\nimport { Nav, Link } from './Navigation.styles';\n\nexport const Navigation: FC = () => {\n    const logSelected = useRouteMatch('/log');\n    const eventsSelected = useRouteMatch('/events');\n    const customSelected = useRouteMatch('/custom');\n\n    return (\n        <Nav>\n            <Link\n                to=\"/blog\"\n                selected={!logSelected && !eventsSelected && !customSelected}\n            >\n                Blog\n            </Link>\n            <Link to=\"/events\" selected={Boolean(eventsSelected)}>\n                Events\n            </Link>\n            <Link to=\"/log\" selected={Boolean(logSelected)}>\n                Log\n            </Link>\n            <Link to=\"/custom\" selected={Boolean(customSelected)}>\n                Custom\n            </Link>\n        </Nav>\n    );\n};\n","const data = JSON.stringify(\n    [\n        {\n            id: 'AB-0021',\n            date: '21/02/2021 8:08pm',\n            content:\n                'Lorem ipsum dolor sit amet consectetur adipisicing elit. At, nisi facilis fugiat recusandae atque laudantium. At dicta praesentium tempora animi explicabo, dignissimos magni molestiae nesciunt, unde quisquam atque? Quae, vel! Lorem, ipsum dolor sit amet consectetur adipisicing elit. Fugiat aliquid, molestias accusamus omnis placeat animi ullam qui facere nostrum, id quidem nesciunt quia quae. Quos voluptatem earum numquam quasi voluptatum?',\n        },\n        {\n            id: 'AB-0029',\n            date: '21/02/2021 8:30pm',\n            content:\n                'Lorem ipsum dolor sit, amet consectetur adipisicing elit. Consequuntur minus voluptas voluptate, nobis tempore at, mollitia doloribus deserunt fugiat quia nam! Id, deleniti porro. Culpa sint quia eum aut voluptatem!',\n        },\n        {\n            id: 'AB-0102',\n            date: '21/02/2021 8:46pm',\n            content:\n                'Lorem ipsum, dolor sit amet consectetur adipisicing elit. Quasi beatae alias numquam saepe error! Blanditiis laborum rem quibusdam ab doloribus. Voluptatem, repudiandae illum? Repellendus sapiente, numquam debitis voluptate reiciendis suscipit.',\n        },\n    ],\n    null,\n    2,\n);\n\nconst schema = `\nlayout: card\nsections:\n  header:\n    style:\n      - flex\n      - h6\n      - margin-bottom: 18px\n        color: \"#acacac\"\n        font-size: 14px\n        font-weight: 400\n    content:\n      left:\n        content: id\n      right:\n        content: date\n  body:\n    content: content\n`;\n\nexport { schema, data };\n","const data = JSON.stringify(\n    [\n        {\n            date: '21',\n            month: 'Feb',\n            title: 'Feburary 2021 OWASP Meetup',\n            description:\n                'So you have an access key that you need to store somewhere. Maybe it is better not to put it in your code, nor in your container.',\n        },\n        {\n            date: '15',\n            month: 'Mar',\n            title: 'Testing Serverless Apps in AWS',\n            description:\n                'What are we supposed to test? How do we test our app on both unit and integration levels? How can we make sure our app will work properly in a live environment?',\n        },\n    ],\n    null,\n    2,\n);\n\nconst schema = `\nlayout: card\nsections:\n  main:\n    style: flex\n    content:\n      date:\n        style:\n          flex: 0\n          background: '#ececec'\n          min-width: 45px\n          padding: 8px\n          border-radius: 8px\n          text-align: center\n        content:\n          date:\n            style: h1\n            content: date\n          month:\n            style:\n              - h6\n              - color: '#aaa'\n            content: month\n      description:\n        style:\n          flex: 1\n          margin-left: 30px\n        content:\n          title:\n            style:\n              - h3\n              - margin-bottom: 12px\n            content: title\n          description:\n            content: description\n`;\n\nexport { schema, data };\n","export const data = JSON.stringify(\n    [{ test: 'Hello' }, { test: 'World!' }],\n    null,\n    2,\n);\n\nexport const schema = `\nlayout: card\nsections:\n  sectionOne:\n    content: test\n`;\n","export const data = `\n[\n    {\n      \"title\": \"RefinementCodeReview\",\n      \"summary\": \"When people think of code reviews, they usually think in terms of an explicit step in a development team's workflow.\",\n      \"posted\": \"28 January 2021\"\n    },\n    {\n      \"title\": \"PullRequest\",\n      \"summary\": \"Pull Requests are a mechanism popularized by github, used to help facilitate merging of work, particularly in the context of open-source projects.\",\n      \"posted\": \"28 January 2021\"\n    },\n    {\n      \"title\": \"ComputationalNotebook\",\n      \"summary\": \"A computational notebook is an environment for writing a prose document that allows the author to embed code which can be easily executed with the results also incorporated into the document. It's a platform particularly well-suited for data science work. Such environments include Jupyter Notebook, R Markdown, Mathematica, and Emacs's org-mode.\",\n      \"posted\": \"18 November 2020\"\n    }\n]\n`;\n\nexport const schema = `\nlayout: card\nsections:\n  heading:\n    content: title\n    style:\n      - h3\n      - margin-bottom: 12px\n  summary:\n    content: summary\n    style:\n      margin-bottom: 8px\n      color: '#555'\n  post-date:\n    content: posted\n    style:\n      - h6\n      - font-size: 14px\n        text-align: right\n        color: \"#999\"\n`;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n    display: flex;\n`;\n\nexport const EditorContainer = styled.div`\n    flex: 0 0 50%;\n    padding: 15px;\n`;\n\nexport const CardContainer = styled.div`\n    flex: 0 0 50%;\n    padding: 15px;\n`;\n\nexport const Heading = styled.h4`\n    color: #333;\n    text-transform: uppercase;\n    font-weight: 400;\n`;\n\nexport const ErrorContainer = styled.div`\n    background-color: #fff5f5;\n    border: 1px solid #fc8181;\n    color: #c53030;\n\n    padding: 20px;\n    border-radius: 8px;\n`;\n\nexport const ErrorHeading = styled.h5`\n    font-size: 18px;\n    margin: 0;\n`;\n\nexport const ErrorMessage = styled.p`\n    margin: 18px 0 0;\n`;\n","import { FC, useState } from 'react';\nimport MonacoEditor from 'react-monaco-editor';\n\nimport { Card } from '../card';\nimport { useData } from './hooks/use-data';\nimport { useSchema } from './hooks/use-schema';\n\nimport {\n    Container,\n    EditorContainer,\n    CardContainer,\n    Heading,\n    ErrorContainer,\n    ErrorHeading,\n    ErrorMessage,\n} from './Example.styles';\n\ntype Props = {\n    rawSchema: string;\n    rawData: string;\n};\n\nexport const Example: FC<Props> = ({ rawSchema, rawData }: Props) => {\n    const [editorSchema, setEditorSchema] = useState(rawSchema);\n    const [editorData, setEditorData] = useState(rawData);\n\n    const [schema, schemaError] = useSchema(editorSchema);\n    const [data, dataError] = useData(editorData);\n\n    return (\n        <Container>\n            <EditorContainer>\n                <Heading>Schema</Heading>\n                <MonacoEditor\n                    height={400}\n                    language=\"yaml\"\n                    theme=\"vs-dark\"\n                    value={editorSchema}\n                    onChange={setEditorSchema}\n                    options={{\n                        lineNumbers: 'off',\n                        minimap: { enabled: false },\n                    }}\n                />\n\n                <Heading>Data</Heading>\n                <MonacoEditor\n                    height={200}\n                    language=\"json\"\n                    theme=\"vs-dark\"\n                    value={editorData}\n                    onChange={setEditorData}\n                    options={{\n                        lineNumbers: 'off',\n                        minimap: { enabled: false },\n                    }}\n                />\n            </EditorContainer>\n\n            <CardContainer>\n                <Heading>Result</Heading>\n\n                {dataError && (\n                    <ErrorContainer>\n                        <ErrorHeading>Data Error</ErrorHeading>\n                        <ErrorMessage>{dataError.message}</ErrorMessage>\n                    </ErrorContainer>\n                )}\n\n                {schemaError && (\n                    <ErrorContainer>\n                        <ErrorHeading>Schema Error</ErrorHeading>\n                        <ErrorMessage>{schemaError.message}</ErrorMessage>\n                    </ErrorContainer>\n                )}\n\n                {!dataError &&\n                    !schemaError &&\n                    data.map((item, idx) => (\n                        <Card key={idx} schema={schema} data={item} />\n                    ))}\n            </CardContainer>\n        </Container>\n    );\n};\n","import { useMemo } from 'react';\nimport { Data } from '../../../types/data.types';\n\ntype DataTuple = [data: Data[], error: Error | null];\n\nexport const useData = (rawData: string): DataTuple =>\n    useMemo<DataTuple>(() => {\n        try {\n            const data = JSON.parse(rawData) as Data[];\n            return [data, null];\n        } catch (error) {\n            return [[], error as Error];\n        }\n    }, [rawData]);\n","import { FC } from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport { schema as basicSchema, data as basicData } from '../../examples/basic';\nimport { schema as eventSchema, data as eventData } from '../../examples/event';\nimport {\n    schema as customSchema,\n    data as customData,\n} from '../../examples/custom';\nimport {\n    schema as postSchema,\n    data as postData,\n} from '../../examples/blog-post';\n\nimport { Example } from '../example/Example';\n\nexport const AppRouter: FC = () => (\n    <Switch>\n        <Route path=\"/blog\">\n            <Example key=\"/blog\" rawSchema={postSchema} rawData={postData} />\n        </Route>\n\n        <Route path=\"/log\">\n            <Example key=\"/log\" rawSchema={basicSchema} rawData={basicData} />\n        </Route>\n\n        <Route path=\"/events\">\n            <Example\n                key=\"/events\"\n                rawSchema={eventSchema}\n                rawData={eventData}\n            />\n        </Route>\n\n        <Route path=\"/custom\">\n            <Example\n                key=\"/custom\"\n                rawSchema={customSchema}\n                rawData={customData}\n            />\n        </Route>\n\n        <Route>\n            <Example key=\"/\" rawSchema={postSchema} rawData={postData} />\n        </Route>\n    </Switch>\n);\n","import React, { FC } from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport Header from './components/header';\nimport { Documentation } from './components/docs';\nimport { Footer } from './components/footer';\nimport { AppRouter, Navigation } from './components/router';\n\nimport './index.css';\n\nconst App: FC = () => {\n    const routingBase =\n        process.env.NODE_ENV === 'production'\n            ? '/card-style-config-prototype'\n            : '';\n\n    return (\n        <Router basename={routingBase}>\n            <div className=\"app\">\n                <div className=\"app__section\">\n                    <Header />\n                </div>\n\n                <div className=\"app__section\">\n                    <Navigation />\n                </div>\n\n                <div className=\"app__section\">\n                    <AppRouter />\n                </div>\n            </div>\n\n            <Documentation />\n            <Footer />\n        </Router>\n    );\n};\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}